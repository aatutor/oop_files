// #define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

//базовый класс
class B
{
public:
	//виртуальна€ функци€ дл€
	//последующего переопределени€ в потомке
	virtual void Test()
	{
		cout << "Test B\n\n";
	}
};
//класс-потомок
class D : public B
{
public:
	//переопределение виртуальной функции
	void Test() override
	{
		cout << "Test D\n\n";
	}
};

int main()
// int main(int argc, char *argv[])
{
	//указатель на класс-родитель
	//объект класса-родител€
	B *ptr_b, obj_b;
	//указатель на класс-потомок
	//и объект класса-потомка
	D *ptr_d, obj_d;
	//приводим адрес объекта (D*) к указателю типа D*
	ptr_d = dynamic_cast<D *>(&obj_d);
	//если все прошло успешно Ч вернулс€ !0
	//произошло приведение
	if (ptr_d)
	{
		cout << "Good work Ч ";
		//здесь вызов функции класса-потомка
		//на экране Ч Test D
		ptr_d->Test();
	}
	//если произошла ошибка Ч вернулс€ 0
	else
		cout << "Error work!!!\n\n";

	//приводим адрес объекта (D*) к указателю типа B*
	ptr_b = dynamic_cast<B *>(&obj_d);
	//если все прошло успешно Ч вернулс€ !0
	//произошло приведение
	if (ptr_b)
	{
		cout << "Good work Ч ";
		//здесь вызов функции класса-потомка
		//на экране Ч Test D
		ptr_b->Test();
	}
	//если произошла ошибка Ч вернулс€ 0
	else
		cout << "Error work!!!\n\n";

	//приводим адрес объекта (D*) к указателю типа B*
	ptr_b = dynamic_cast<B *>(&obj_d);
	//если все прошло успешно Ч вернулс€ !0
	//произошло приведение
	if (ptr_b)
	{
		cout << "Good work Ч ";
		//здесь вызов функции класса-потомка
		//на экране Ч Test D
		ptr_b->Test();
	}
	//если произошла ошибка Ч вернулс€ 0
	else
		cout << "Error work!!!\n\n";

	//приводим адрес объекта (B*) к указателю типа B*
	ptr_b = dynamic_cast<B *>(&obj_b);
	//если все прошло успешно Ч вернулс€ !0
	//произошло приведение
	if (ptr_b)
	{
		cout << "Good work Ч ";
		//здесь вызов функции класса-потомка
		//на экране Ч Test B
		ptr_b->Test();
	}
	//если произошла ошибка Ч вернулс€ 0
	else
		cout << "Error work!!!\n\n";
	//¬Ќ»ћјЌ»≈!!! Ё“ќ Ќ≈¬ќ«ћќ∆Ќќ

	//попытка привести адрес объекта (B*)
	//к указателю типа D*
	ptr_d = dynamic_cast<D *>(&obj_b);
	//если все прошло успешно Ч вернулс€ !0
	//произошло приведение
	if (ptr_d)
		cout << "Good work Ч ";
	//если произошла ошибка Ч вернулс€ 0
	else
		cout << "Error work!!!\n\n";
		
	return 0;
}
